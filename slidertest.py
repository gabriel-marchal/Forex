import datetime

import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import plotly.graph_objects as go
#import pyodbc
import pandas as pd



TEST_yaxe = ['2019-01-01', '2019-01-02', '2019-01-03', '2019-01-04', '2019-01-05', '2019-01-06', '2019-01-07', '2019-01-08', '2019-01-09', '2019-01-10', '2019-01-11', '2019-01-12', '2019-01-13', '2019-01-14', '2019-01-15', '2019-01-16', '2019-01-17', '2019-01-18', '2019-01-19', '2019-01-20', '2019-01-21', '2019-01-22', '2019-01-23', '2019-01-24', '2019-01-25', '2019-01-26', '2019-01-27', '2019-01-28', '2019-01-29', '2019-01-30', '2019-01-31', '2019-02-01', '2019-02-02', '2019-02-03', '2019-02-04', '2019-02-05', '2019-02-06', '2019-02-07', '2019-02-08', '2019-02-09', '2019-02-10', '2019-02-11', '2019-02-12', '2019-02-13', '2019-02-14', '2019-02-15', '2019-02-16', '2019-02-17', '2019-02-18', '2019-02-19', '2019-02-20', '2019-02-21', '2019-02-22', '2019-02-23', '2019-02-24', '2019-02-25', '2019-02-26', '2019-02-27', '2019-02-28', '2019-03-01', '2019-03-02', '2019-03-03', '2019-03-04', '2019-03-05', '2019-03-06', '2019-03-07', '2019-03-08', '2019-03-09', '2019-03-10', '2019-03-11', '2019-03-12', '2019-03-13', '2019-03-14', '2019-03-15', '2019-03-16', '2019-03-17', '2019-03-18', '2019-03-19', '2019-03-20', '2019-03-21', '2019-03-22', '2019-03-23', '2019-03-24', '2019-03-25', '2019-03-26', '2019-03-27', '2019-03-28', '2019-03-29', '2019-03-30', '2019-03-31', '2019-04-01', '2019-04-02', '2019-04-03', '2019-04-04', '2019-04-05', '2019-04-06', '2019-04-07', '2019-04-08', '2019-04-09', '2019-04-10', '2019-04-11', '2019-04-12', '2019-04-13', '2019-04-14', '2019-04-15', '2019-04-16', '2019-04-17', '2019-04-18', '2019-04-19', '2019-04-20', '2019-04-21', '2019-04-22', '2019-04-23', '2019-04-24', '2019-04-25', '2019-04-26', '2019-04-27', '2019-04-28', '2019-04-29', '2019-04-30', '2019-05-01', '2019-05-02', '2019-05-03', '2019-05-04', '2019-05-05', '2019-05-06', '2019-05-07', '2019-05-08', '2019-05-09', '2019-05-10', '2019-05-11', '2019-05-12', '2019-05-13', '2019-05-14', '2019-05-15', '2019-05-16', '2019-05-17', '2019-05-18', '2019-05-19', '2019-05-20', '2019-05-21', '2019-05-22', '2019-05-23', '2019-05-24', '2019-05-25', '2019-05-26', '2019-05-27', '2019-05-28', '2019-05-29', '2019-05-30', '2019-05-31', '2019-06-01', '2019-06-02', '2019-06-03', '2019-06-04', '2019-06-05', '2019-06-06', '2019-06-07', '2019-06-08', '2019-06-09', '2019-06-10', '2019-06-11', '2019-06-12', '2019-06-13', '2019-06-14', '2019-06-15', '2019-06-16', '2019-06-17', '2019-06-18', '2019-06-19', '2019-06-20', '2019-06-21', '2019-06-22', '2019-06-23', '2019-06-24', '2019-06-25', '2019-06-26', '2019-06-27', '2019-06-28', '2019-06-29', '2019-06-30', '2019-07-01', '2019-07-02', '2019-07-03', '2019-07-04', '2019-07-05', '2019-07-06', '2019-07-07', '2019-07-08', '2019-07-09', '2019-07-10', '2019-07-11', '2019-07-12', '2019-07-13', '2019-07-14', '2019-07-15', '2019-07-16', '2019-07-17', '2019-07-18', '2019-07-19', '2019-07-20', '2019-07-21', '2019-07-22', '2019-07-23', '2019-07-24', '2019-07-25', '2019-07-26', '2019-07-27', '2019-07-28', '2019-07-29', '2019-07-30', '2019-07-31', '2019-08-01', '2019-08-02', '2019-08-03', '2019-08-04', '2019-08-05', '2019-08-06', '2019-08-07', '2019-08-08', '2019-08-09', '2019-08-10', '2019-08-11', '2019-08-12', '2019-08-13', '2019-08-14', '2019-08-15', '2019-08-16', '2019-08-17', '2019-08-18', '2019-08-19', '2019-08-20', '2019-08-21', '2019-08-22', '2019-08-23', '2019-08-24', '2019-08-25', '2019-08-26', '2019-08-27', '2019-08-28', '2019-08-29', '2019-08-30', '2019-08-31', '2019-09-01', '2019-09-02', '2019-09-03', '2019-09-04', '2019-09-05', '2019-09-06', '2019-09-07', '2019-09-08', '2019-09-09', '2019-09-10', '2019-09-11', '2019-09-12', '2019-09-13', '2019-09-14', '2019-09-15', '2019-09-16', '2019-09-17', '2019-09-18', '2019-09-19', '2019-09-20', '2019-09-21', '2019-09-22', '2019-09-23', '2019-09-24', '2019-09-25', '2019-09-26', '2019-09-27', '2019-09-28', '2019-09-29', '2019-09-30', '2019-10-01', '2019-10-02', '2019-10-03', '2019-10-04', '2019-10-05', '2019-10-06', '2019-10-07', '2019-10-08', '2019-10-09', '2019-10-10', '2019-10-11', '2019-10-12', '2019-10-13', '2019-10-14', '2019-10-15', '2019-10-16', '2019-10-17', '2019-10-18', '2019-10-19', '2019-10-20', '2019-10-21', '2019-10-22', '2019-10-23', '2019-10-24', '2019-10-25', '2019-10-26', '2019-10-27', '2019-10-28', '2019-10-29', '2019-10-30', '2019-10-31', '2019-11-01', '2019-11-02', '2019-11-03', '2019-11-04', '2019-11-05', '2019-11-06', '2019-11-07', '2019-11-08', '2019-11-09', '2019-11-10', '2019-11-11', '2019-11-12', '2019-11-13', '2019-11-14', '2019-11-15', '2019-11-16', '2019-11-17', '2019-11-18', '2019-11-19', '2019-11-20', '2019-11-21', '2019-11-22', '2019-11-23', '2019-11-24', '2019-11-25', '2019-11-26', '2019-11-27', '2019-11-28', '2019-11-29', '2019-11-30', '2019-12-01', '2019-12-02', '2019-12-03', '2019-12-04', '2019-12-05', '2019-12-06', '2019-12-07', '2019-12-08', '2019-12-09', '2019-12-10', '2019-12-11', '2019-12-12', '2019-12-13', '2019-12-14', '2019-12-15', '2019-12-16', '2019-12-17', '2019-12-18', '2019-12-19', '2019-12-20', '2019-12-21', '2019-12-22', '2019-12-23', '2019-12-24', '2019-12-25', '2019-12-26', '2019-12-27', '2019-12-28', '2019-12-29', '2019-12-30', '2019-12-31', '2020-01-01']
TEST_xaxe=[0.947777, 0.951196, 0.946054, 0.952456, 0.951541, 0.951656, 0.949608, 0.94945, 0.947741, 0.951184, 0.954917, 0.957352, 0.957345, 0.955805, 0.954547, 0.951296, 0.953352, 0.950702, 0.950057, 0.950135, 0.951311, 0.951056, 0.953054, 0.946905, 0.95077, 0.948712, 0.948989, 0.950884, 0.948283, 0.948969, 0.956932, 0.9506, 0.949439, 0.949249, 0.947688, 0.95004, 0.940162, 0.943048, 0.941655, 0.941463, 0.941296, 0.939354, 0.939435, 0.940479, 0.943561, 0.945487, 0.94587, 0.945813, 0.943093, 0.946671, 0.944401, 0.934074, 0.941407, 0.935898, 0.935769, 0.945191, 0.946216, 0.937954, 0.934611, 0.940006, 0.940254, 0.940669, 0.944002, 0.944455, 0.944387, 0.943847, 0.946253, 0.946155, 0.944756, 0.946732, 0.947643, 0.943437, 0.94014, 0.945882, 0.945439, 0.945214, 0.947153, 0.943658, 0.944658, 0.950721, 0.95083, 0.950376, 0.950529, 0.95448, 0.956072, 0.949809, 0.949943, 0.948593, 0.946655, 0.946772, 0.949793, 0.942573, 0.948758, 0.949881, 0.950176, 0.951513, 0.951056, 0.948655, 0.949777, 0.953685, 0.953433, 0.956998, 0.955291, 0.953959, 0.959956, 0.95785, 0.956172, 0.956224, 0.956976, 0.957912, 0.95856, 0.952725, 0.952136, 0.946074, 0.945844, 0.948036, 0.947181, 0.946137, 0.948641, 0.945396, 0.944375, 0.943077, 0.942234, 0.942594, 0.941595, 0.940649, 0.943794, 0.942752, 0.941227, 0.939686, 0.939185, 0.9387, 0.935629, 0.935636, 0.930968, 0.927645, 0.925982, 0.924595, 0.922977, 0.928659, 0.923141, 0.923026, 0.928908, 0.930177, 0.930729, 0.930647, 0.929448, 0.933813, 0.935162, 0.933456, 0.937245, 0.937338, 0.936421, 0.937177, 0.937487, 0.934971, 0.93409, 0.930261, 0.928803, 0.928148, 0.923622, 0.924302, 0.923348, 0.920936, 0.919817, 0.922205, 0.920346, 0.919189, 0.920468, 0.917677, 0.913598, 0.914899, 0.915802, 0.915218, 0.919306, 0.918289, 0.916796, 0.918166, 0.917303, 0.920091, 0.91951, 0.913854, 0.917163, 0.919171, 0.916401, 0.913377, 0.912763, 0.912993, 0.912171, 0.909105, 0.912504, 0.912803, 0.913797, 0.914506, 0.914642, 0.917492, 0.915835, 0.915178, 0.921524, 0.921386, 0.91977, 0.919522, 0.923311, 0.920059, 0.916815, 0.914031, 0.910832, 0.910244, 0.909109, 0.908571, 0.90507, 0.904969, 0.905383, 0.898938, 0.897837, 0.897976, 0.894668, 0.897404, 0.900122, 0.902146, 0.899106, 0.897341, 0.897228, 0.894129, 0.898719, 0.8982, 0.903518, 0.900722, 0.899617, 0.899421, 0.900948, 0.903629, 0.901933, 0.899306, 0.899088, 0.897323, 0.891276, 0.900532, 0.896965, 0.89693, 0.895431, 0.894777, 0.897131, 0.89682, 0.895073, 0.900887, 0.900306, 0.902694, 0.903145, 0.901563, 0.895288, 0.903425, 0.902213, 0.90474, 0.907285, 0.913683, 0.91397, 0.910793, 0.909287, 0.908362, 0.908673, 0.9012, 0.898439, 0.897415, 0.897326, 0.899093, 0.900067, 0.896325, 0.896441, 0.896005, 0.895677, 0.895594, 0.893359, 0.886918, 0.891522, 0.899431, 0.901576, 0.901328, 0.901459, 0.896883, 0.89672, 0.896782, 0.898453, 0.896976, 0.896522, 0.896956, 0.895405, 0.891922, 0.891074, 0.896406, 0.899371, 0.900106, 0.900143, 0.899562, 0.898223, 0.896127, 0.89148, 0.892309, 0.890644, 0.890606, 0.893323, 0.897442, 0.905907, 0.905718, 0.908616, 0.908514, 0.908292, 0.906802, 0.908193, 0.907431, 0.908275, 0.90596, 0.907826, 0.907271, 0.905642, 0.905248, 0.904353, 0.898541, 0.900785, 0.90136, 0.901613, 0.900867, 0.903608, 0.905046, 0.901835, 0.901864, 0.902723, 0.903103, 0.901277, 0.901589, 0.90076, 0.898897, 0.898431, 0.897981, 0.898075, 0.906986, 0.909741, 0.904982, 0.900459, 0.906016, 0.906697, 0.907107, 0.903801, 0.901466, 0.906184, 0.909425, 0.90652, 0.905572, 0.905673, 0.906102, 0.900797, 0.899062, 0.90345, 0.908959, 0.907735, 0.907199, 0.910849, 0.911219, 0.910021, 0.910687, 0.912288, 0.912933, 0.913075, 0.914552, 0.911173, 0.911511]

currencies = [
    "AUDCAD",
    "AUDJPY",
    "AUDNZD",
    "AUDUSD",
    "AUDCHF",
    "CADJPY",
    "CADCHF",
    "CHFJPY",
    "EURAUD",
    "EURCAD",
    "EURGBP",
    "EURNZD",
    "EURUSD",
    "EURCHF",
    "EURJPY",
    "GBPAUD",
    "GBPCAD",
    "GBPJPY",
    "GBPNZD",
    "GBPUSD",
    "GBPCHF",
    "NZDCAD",
    "NZDJPY",
    "NZDUSD",
    "USDCAD",
    "USDCHF",
    "USDJPY"  
]


def plot(ydates, xvalues, currency):
    t = ydates
    s = xvalues

    fig, ax = plt.subplots()
    ax.plot(t, s)
    

    ax.set(xlabel='Time', ylabel='Values', title=currency)
    ax.grid(True)
    plt.show()
#plot(yaxe, xaxe, "AUDCAD")

'''
try: # Connect to Azure SQL Server
    server = 'forexbd.database.windows.net'
    database = 'Forex'
    username = 'epoxyfish'
    password = 'Python3Appsql@11'
    driver= '{ODBC Driver 17 for SQL Server}'
    cnxn = pyodbc.connect(DRIVER=driver,SERVER=server,PORT=1433,DATABASE=database,UID=username,PWD=password)
    cursor = cnxn.cursor()
except:
    print("Could not connect to SQL server")
'''

def runplot(xaxe,yaxe, currency):
    # Create figure
    fig = go.Figure()


    fig.add_trace(
        go.Scatter(x=list(yaxe), y=list(xaxe)))

    # Set title
    fig.update_layout(
        title_text=currency
    )

    # Add range slider
    fig.update_layout(
        xaxis=dict(
            rangeselector=dict(
                buttons=list([
                    dict(count=1,
                        label="1m",
                        step="month",
                        stepmode="backward"),
                    dict(count=6,
                        label="6m",
                        step="month",
                        stepmode="backward"),
                    dict(count=1,
                        label="YTD",
                        step="year",
                        stepmode="todate"),
                    dict(count=1,
                        label="1y",
                        step="year",
                        stepmode="backward"),
                    dict(step="all")
                ])
            ),
            rangeslider=dict(
                visible=True
            ),
            type="date"
        )
    )

    fig.show()

def select(currency, start_date,end_date, date_flag):
    xaxe=[]
    yaxe=[]
    if date_flag == True:
        query = "SELECT Date, "+currency+ " from Exchanges where Date between '"+start_date+"' AND '"+ end_date+"'"
    else:
        query = "SELECT Date, "+currency+ " from Exchanges"
    '''
    cursor.execute(query)
    
    for row in cursor:
        ydates = str(row[0])
        xvalues = row[1]
        yaxe.insert(0,str(row[0]))
        xaxe.insert(0,row[1])
        print(str(row[0])," value: ", row[1])
    '''
    return(xaxe, yaxe)

while True:
    ################ WARNING ################
    print("\n!!! OJO FREDE!!!")
    print("\n!!!\nYOU WILL BE RUNNING WITH BURNT INPUT DATA \nTHE FOLLOWING INPUT PROMPT IS ONLY FOR TESTING")
    print("YOUR INPUT WILL NOT AFFECT THE OUTPUT\n!!!")
    # TODO Figure out why the fucking connection string wont link to the DB.. Piece of garbage software
    #########################################
    print("Enter a currency pair to run from the following list: \n")
    print("AUDCAD AUDJPY AUDNZD AUDUSD AUDCHF \nCADJPY CADCHF CHFJPY EURAUD EURCAD \nEURGBP EURNZD EURUSD EURCHF EURJPY \nGBPAUD GBPCAD GBPJPY GBPNZD GBPUSD \nGBPCHF NZDCAD NZDJPY NZDUSD USDCAD \nUSDCHF USDJPY")
    inputvar = input("Pair: ")
    
    if inputvar in currencies:
        date_choice = input("Do you wish to select a date range? n for all data.  y/n?  ")
        if date_choice == "y":
            date_flag = True
            print("Enter the start date")
            start_year= int(input("Year: "))
            start_month = int(input("Month: "))
            start_day = int(input("Day: "))

            print("Enter end date")
            end_year = int(input("Year: "))
            end_month = int(input("Month: "))
            end_day = int(input("Day: "))

            start_date = datetime.date(year=start_year, month=start_month , day=start_day)
            end_date = datetime.date(year=end_year, month = end_month, day =end_day)
            
        else:
            date_flag = False
            start_date = 0
            end_date = 0
            
        xaxe,yaxe = select(inputvar, str(start_date), str(end_date), date_flag)
        
        runplot(TEST_xaxe,TEST_yaxe, inputvar)
        #select(inputvar, str(start_date), str(end_date), date_flag)
        
    else:
        print("Invalid input.")




